---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 9 @ 11:59PM
author: "Xier Lu UID:206331941"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
execute:
  eval: false    
---


Display machine information for reproducibility:


```{r}
sessionInfo()
```


Load necessary libraries (you can add more as needed).


```{r setup}
library(arrow)
library(data.table)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(readr)
```


Display memory information of your computer


```{r}
memuse::Sys.meminfo()
```


In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:


```{bash}
ls -l ~/desktop/mimic/hosp/
```

```{bash}
ls -l ~/desktop/mimic/icu/
```


## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage.)\
**Answer:** `fread` is the fastest. `read_csv` and `read.csv` are comparable. `fread` uses the least memory. `read_csv` uses second memory and `read.csv` uses the most memory.


```{r}
#| eval: true
library(readr)
library(data.table)
setwd("/Users/luxier/Desktop/mimic/hosp/")
system.time({
   read_csv("admissions.csv.gz")
})
system.time({
   read.csv("admissions.csv.gz")
})
system.time({
   fread("admissions.csv.gz")
})

pryr::object_size(read_csv("admissions.csv.gz"))
pryr::object_size(read.csv("admissions.csv.gz"))
pryr::object_size(fread("admissions.csv.gz"))

```


### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

**Answer:** The run time(0.303s) is less than Q1.1(0.402s). The memory is 55.31MB.


```{r}
#| eval: true
library(readr)
setwd("/Users/luxier/Desktop/mimic/hosp/")
col_types_spec <- cols(
  col1 = col_double(),
  col2 = col_character(),
  col3 = col_integer(),
)
system.time({
  admissions <- read_csv("admissions.csv.gz", col_types = col_types_spec)
})

pryr::object_size(admissions)

```


## Q2. Ingest big data files

<p align="center">

<img src="./bigfile.png" width="50%"/>

</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 125x bigger than `admissions.csv.gz`.


```{bash}
ls -l ~/desktop/mimic/hosp/labevents.csv.gz
```


Display the first 10 lines of this file.


```{bash}
zcat < ~/desktop/mimic/hosp/labevents.csv.gz | head -10
```


### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">

<img src="./readr_logo.png" width="20%"/>

</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 5 minutes on your computer, then abort the program and report your findings.\
**Answer:** The time is 5.5 minutes. These results suggest that reading the file was a fairly time-consuming operation. This could be due to the size of the file, the compressed format of the file, or the complexity of the data. Such lengthy read times are not uncommon when dealing with large datasets, especially when using functions that involve extensive data decompression and processing.


```{r}
#| eval: false
setwd("/Users/luxier/Desktop/mimic/hosp/")

system.time({
  labevents <- read_csv("labevents.csv.gz")
  if (Sys.time() - ptm > 300) {
    stop("Ingestion aborted after 5 minutes.")
  }
})


```


### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`. Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)\
**Answer:**This solves the ingestion issue. The time is 1.5 minutes.


```{r}
#| eval: true
setwd("/Users/luxier/Desktop/mimic/hosp/")
system.time({
  labevents_selected <- read_csv("labevents.csv.gz", 
                                col_select = c(subject_id, itemid, charttime, valuenum))
})

```


### Q2.3 Ingest subset of `labevents.csv.gz`

<p align="center">

<img src="./linux_logo.png" width="20%"/>

</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data. Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. To save render time, put `#| eval: false` at the beginning of this code chunk.) Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

**Answer:** There are 24855910 lines in this new file. The time is 3.732s.


```{bash}
#| eval: false
zcat < ~/desktop/mimic/hosp/labevents.csv.gz | awk -F, 'BEGIN {OFS=","} NR==1 || $5 == 50912 || $5 == 50971 || $5 == 50983 || $5 == 50902 || $5 == 50882 || $5 == 51221 || $5 == 51301 || $5 == 50931 {print $2, $5, $7, $10}' | gzip > labevents_filtered.csv.gz
zcat < ~/labevents_filtered.csv.gz | head -10
zcat < ~/labevents_filtered.csv.gz | wc -l

```

```{r}
system.time({
  labevents_filtered <- read_csv("labevents_filtered.csv.gz")
})
```


### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">

<img src="./arrow_logo.png" width="30%"/>

</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory. To save render time, put `#| eval: false` at the beginning of this code chunk.

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator.

**Answer:** The time is 0.041s. The number of rows is 24855909. The first 10 rows are the same as in Q2.3.

Apache Arrow is a cross-language development platform for in-memory data. It specifies a standardized language-independent columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware. It also provides high-performance data interchange between systems and applications. It is designed to improve the performance of analytical workloads on modern hardware, and to simplify the development of high-performance analytics and machine learning libraries. 



```{r}
#| eval: true
library(arrow)
library(dplyr)

system.time({
  labevents_arrow <- arrow::open_dataset("/Users/luxier/desktop/mimic/hosp/labevents.csv", format = "csv") %>%
    dplyr::select(subject_id, itemid, charttime, valuenum) %>%
    dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931))
})

system.time({
  labevents_arrow <- arrow::open_dataset("/Users/luxier/Desktop/mimic/hosp/labevents.csv", format = "csv") %>%
    dplyr::select(subject_id, itemid, charttime, valuenum) %>%
    dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931))
})
nrow(labevents_arrow)
head(labevents_arrow, 10)
```


### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">

<img src="./parquet_logo.png" width="30%"/>

</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

**Answer:** The file size of "labevents.parquet" file is reported as 96 bytes. The time is  0.935 s. The number of rows is 24855909. The first 10 rows are the same as in Q2.3.

Parquet is a columnar storage format that is optimized for fast retrieval of data. It is designed to be efficient for both read and write operations, and it is particularly well-suited for use with distributed systems. Parquet is a popular choice for storing large datasets, and it is widely used in the big data ecosystem. It is designed to be highly efficient in terms of both storage and processing, and it is well-suited for use with modern hardware and software systems. 


```{r}
#| eval: true
library(readr)
library(arrow)
library(dplyr)
library(data.table)

labevents <- fread("/Users/luxier/desktop/mimic/hosp/labevents.csv")

labevents <- fread("/Users/luxier/Desktop/mimic/hosp/labevents.csv")
labevents_frame <- as.data.frame(labevents)
arrow::write_dataset(labevents_frame, "labevents.parquet", format = "parquet")
file.size("labevents.parquet")

system.time({
  labevents.parquet <- arrow::open_dataset("labevents.parquet") %>%
    dplyr::select(subject_id, itemid, charttime, valuenum) %>%
    dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931))%>%
    collect()
})
nrow(labevents.parquet)
head(labevents.parquet, 10)


```


### Q2.6 DuckDB

<p align="center">

<img src="./duckdb_logo.png" width="20%"/>

</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

**Answer:** The time is 1.533s. The number of rows is 24855909. The first 10 rows are the same as in Q2.3, but the subject_id would change.  

DuckDB is like a powerful, easy-to-use toolbox for working with big data. Imagine you have a huge pile of data, like a giant jigsaw puzzle. DuckDB helps you quickly find and piece together the exact parts you need. It's a database system optimized for analytical queries, which means it's really good at answering complex questions about large datasets. 

```{r}
#| eval: true
library(arrow)
library(duckdb)
library(dplyr)
labevents_parquet <- arrow::open_dataset("labevents.parquet")
labevents_duckdb <- arrow::to_duckdb(labevents_parquet)

system.time({
  labevents_duckdb <- labevents_duckdb %>%
    dplyr::select(subject_id, itemid, charttime, valuenum) %>%
    dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
    collect()
})
nrow(labevents_duckdb)
head(labevents_duckdb, 10)

```


## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are


```{bash}
zcat < ~/desktop/mimic/icu/chartevents.csv.gz | head -10
```


[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.


```{bash}
zcat < ~/desktop/mimic/icu/d_items.csv.gz | head -10
```


In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2.

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

**Answer:** The number of rows is 22502319. The first 10 rows are as follows:

```{r}
#| eval: true
library(readr)
library(dplyr)
library(data.table)
chartevents <- fread("/Users/luxier/Desktop/mimic/icu/chartevents.csv.gz")
chartevents_filtered <- chartevents %>%
    dplyr::filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) %>%
    dplyr::select(subject_id, itemid, value, charttime)
nrow(chartevents_filtered)
head(chartevents_filtered, 10)

```

