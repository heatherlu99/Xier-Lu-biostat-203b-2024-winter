---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Xier Lu UID:206331941"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.

2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
#| eval: false
set.seed(203)

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )
```

3. Train and tune the models using the training set.

4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?


####Answer
```{r}
# eval: true
library(GGally)
library(gtsummary)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(mlr3tuning)
library(rsample)
library(keras)
library(ranger)
library(stacks)

mimiciv_icu_cohort <- read_rds("mimiciv_shiny/mimic_icu_cohort.rds") %>%
  arrange(subject_id, hadm_id, stay_id) %>%
  mutate(los_long = as.factor(los_long),
         gender = as.factor(gender),
         respiratory_rate = as.numeric(respiratory_rate),
         non_invasive_blood_pressure_diatolic = as.numeric(non_invasive_blood_pressure_diatolic),
         temperature_f = as.numeric(temperature_f),
         non_invasive_blood_pressure_systolic = as.numeric(non_invasive_blood_pressure_systolic),
         heart_rate = as.numeric(heart_rate)) %>%
  select(-los, -dod, -discharge_location, -hospital_expire_flag)
     
print(mimiciv_icu_cohort)

mimiciv_icu_cohort <- mimiciv_icu_cohort %>%
  select(-3, -2, -1) 

colnames(mimiciv_icu_cohort)
print(mimiciv_icu_cohort)
```

#####Classification Trees
```{r}
# eval: true
mimiciv_icu_cohort1 <- mimiciv_icu_cohort
# Data split
data_split <- initial_split(
  mimiciv_icu_cohort, 
  strata = "los_long", 
  prop = 0.5
)

mimiciv_other <- training(data_split) 
mimiciv_test <- testing(data_split) 

```
#####classiciation tree
```{r}
# eval: true
# Preprocessing
mimic_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimiciv_other
  ) %>%
  step_impute_mean(
sodium, chloride, creatinine, potassium, glucose, hematocrit, wbc, bicarbonate, temperature_f,  non_invasive_blood_pressure_systolic, respiratory_rate, heart_rate, age_at_intime) %>%
  step_impute_mode(first_careunit, admission_type, admission_location, insurance, language, marital_status, race, gender) %>%
  step_naomit(all_predictors()) %>%
  step_novel(all_nominal_predictors()) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_zv(all_numeric_predictors()) %>% 
  step_normalize(all_numeric_predictors()) 
  

# Fit the model
classtree_mod <- decision_tree(
  cost_complexity = tune(),
  tree_depth = tune(),
  min_n = 5,
  mode = "classification",
  engine = "rpart"
  ) 

tree_wf <- workflow() %>%
  add_recipe(mimic_recipe) %>%
  add_model(classtree_mod)

# Tune the model
tree_grid <- grid_regular(cost_complexity(),
                          tree_depth(),
                          levels = c(100,5))


# Cross-validation (CV)
set.seed(203)
folds <- vfold_cv(mimiciv_other, v = 5)

tree_fit <- tree_wf %>%
  tune_grid(
    resamples = folds,
    grid = tree_grid,
    metrics = metric_set(accuracy, roc_auc),
    control = control_stack_grid()
    )

tree_fit %>%
  collect_metrics() %>%
  print(width = Inf) %>%
  filter(.metric == "roc_auc") %>%
  mutate(tree_depth = as.factor(tree_depth)) %>%
  ggplot(mapping = aes(x = cost_complexity, y = mean, color = tree_depth)) +
  geom_point() + 
  geom_line() + 
  labs(x = "cost_complexity", y = "CV ROC AUC", color = "tree_depth") 

# Final model
tree_fit %>%
  show_best("roc_auc")

best_tree <- tree_fit %>%
  select_best("roc_auc")

final_wf <- tree_wf %>%
  finalize_workflow(best_tree)

final_fit <- 
  final_wf %>%
  last_fit(data_split)

final_fit %>% 
  collect_metrics()

library(rpart.plot)
final_tree <- extract_workflow(final_fit)
final_tree

final_tree %>%
  extract_fit_engine() %>%
  rpart.plot(roundint = FALSE)

library(vip)

final_tree %>% 
  extract_fit_parsnip() %>% 
  vip()
```
The image shows a table with performance metrics for a binary classification model referred to as "Preprocessor1_Model1." This model has achieved an accuracy of approximately 0.57, which means it accurately predicts the correct class for the binary target variable about 57% of the time. The model also has an ROC AUC (Receiver Operating Characteristic - Area Under Curve) of about 0.59, which indicates its ability to distinguish between the two classes is slightly better than random chance but still indicates room for improvement. 


#####random forest
```{r}
# eval: true
# Preprocessing
mimic_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimiciv_other
  ) %>%
  step_impute_mean(
sodium, chloride, creatinine, potassium, glucose, hematocrit, wbc, bicarbonate, temperature_f, non_invasive_blood_pressure_diatolic, non_invasive_blood_pressure_systolic, respiratory_rate, heart_rate, age_at_intime) %>%
  step_impute_mode(first_careunit, admission_type, admission_location, insurance, language, marital_status, race, gender) %>%
  step_naomit(all_predictors()) %>%
  step_novel(all_nominal_predictors()) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_zv(all_numeric_predictors()) %>% 
  step_normalize(all_numeric_predictors())

# Fit the model
rf_mod <- rand_forest(
  mode = "classification",
  mtry = tune(),
  trees = tune()
) %>%
set_engine("ranger")

rf_wf <- workflow() %>%
  add_recipe(mimic_recipe) %>%
  add_model(rf_mod)

param_grid <- grid_regular(
  mtry(range = c(1L, 5L)), 
  trees(range = c(100L, 300L)),
  levels = c(3, 5)
)

# Cross-validation (CV)
set.seed(203)
folds <- vfold_cv(mimiciv_other, v = 5)

rf_fit <- rf_wf %>%
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
  )

rf_fit %>%
  collect_metrics() %>%
  print(width = Inf) %>%
  filter(.metric == "roc_auc") %>%
  mutate(mtry = as.factor(mtry)) %>%
  ggplot(mapping = aes(x = trees, y = mean, color = mtry)) +
  # geom_point() + 
  geom_line() + 
  labs(x = "Num. of Trees", y = "CV AUC")

rf_fit %>%
  show_best("roc_auc")

best_rf <- rf_fit %>%
  select_best("roc_auc")

final_wf <- rf_wf %>%
  finalize_workflow(best_rf)

final_fit <- 
  final_wf %>%
  last_fit(data_split)

final_fit %>% 
  collect_metrics()
```
The image displays performance metrics for a binary classification model named "Preprocessor1_Model1." The model achieves an accuracy of approximately 0.6, indicating that it correctly predicts the binary outcome 60.52% of the time. Additionally, the model has an ROC AUC score of approximately 0.64, suggesting a moderate ability to discriminate between the two classes. 


#####boosting
```{r}
# eval: true
# Preprocessing
mimic_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimiciv_other
  ) %>%
  step_impute_mean(
sodium, chloride, creatinine, potassium, glucose, hematocrit, wbc, bicarbonate, temperature_f, non_invasive_blood_pressure_diatolic, non_invasive_blood_pressure_systolic, respiratory_rate, heart_rate, age_at_intime) %>%
  step_impute_mode(first_careunit, admission_type, admission_location, insurance, language, marital_status, race, gender) %>%
  step_naomit(all_predictors()) %>%
  step_novel(all_nominal_predictors()) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_zv(all_numeric_predictors()) %>% 
  step_normalize(all_numeric_predictors())

# Fit the model
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 1000, 
    tree_depth = tune(),
    learn_rate = tune()
  ) %>% 
  set_engine("xgboost")

gb_wf <- workflow() %>%
  add_recipe(mimic_recipe) %>%
  add_model(gb_mod)

param_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3, 10)
  )

set.seed(203)

folds <- vfold_cv(mimiciv_other, v = 5)
gb_fit <- gb_wf %>%
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy),
    control = control_stack_grid()
    )

gb_fit %>%
  collect_metrics() %>%
  print(width = Inf) %>%
  filter(.metric == "roc_auc") %>%
  mutate(tree_depth = as.factor(tree_depth)) %>%
  ggplot(mapping = aes(x = learn_rate, y = mean, color = tree_depth)) +
  geom_point() +
  geom_line() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()

gb_fit %>%
  show_best("roc_auc")

best_gb <- gb_fit %>%
  select_best("roc_auc")

final_wf <- gb_wf %>%
  finalize_workflow(best_gb)

final_fit <- 
  final_wf %>%
  last_fit(data_split)

final_fit %>% 
  collect_metrics()
```


The model described in the image appears to have been evaluated on two performance metrics: accuracy and ROC AUC (Receiver Operating Characteristic Area Under Curve). The accuracy is approximately 0.6, indicating that the model correctly predicts the outcome about 60% of the time. The ROC AUC score is approximately 0.65, suggesting that the model has a fair ability to distinguish between the classes being predicted.

#####comparison
the model of boosting have the best performance in terms of accuracy and ROC AUC. 


#####Model Stacking
```{r}
# eval: true
mimic_model_st <- 
  stacks() |>
  add_candidates(tree_fit) |>
  add_candidates(rf_fit) |>
  add_candidates(gb_fit) |>
  blend_predictions(
    penalty = 10^(-6:2),
    metrics = c("roc_auc", "accuracy")
    ) |>
  fit_members()

mimic_model_st 

autoplot(mimic_model_st, type = "members")
autoplot(mimic_model_st, type = "weights")


mimic_auc <- mimiciv_test %>%
  bind_cols(
    predict(mimic_model_st, .,, type = "prob"))%>%
  print(width = Inf)


roc_auc <- yardstick::roc_auc(
  data = mimic_auc,
  truth = los_long,
  contains( ".pred_FALSE")
)

mimic_acc <- mimiciv_test %>%
  bind_cols(
    predict(mimic_model_st, new_data = mimiciv_test)%>%
  print(width = Inf)
    )

roc_accuracy <- yardstick::accuracy(
  data = mimic_acc,
  truth = "los_long",
  estimate = .pred_class
)


roc_auc
roc_accuracy

```
The model stacking has achieved an ROC AUC (Receiver Operating Characteristic - Area Under Curve) of approximately around 0.65	, indicating a fair capability to discriminate between the positive and negative classes. Additionally, the model has an accuracy score of about 0.6	, meaning that it correctly predicts the target variable 61.53% of the time. These metrics suggest that the model stacking approach provides reasonable predictive performance.