---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Xier Lu, UID: 206331941"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:

```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1.  Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2.  Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3.  Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4.  After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5.  After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Answer:** Display the URL of your GitHub repository here.<https://github.com/heatherlu99/Xier-Lu-biostat-203b-2024-winter>

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:**\
Completion Report: <https://www.citiprogram.org/verify/?k3fcc6f42-7cce-4e10-8178-700669df7a18-60370386> \


## Q3. Linux Shell Commands

1.  Make the MIMIC v2.2 data available at location `~/mimic`.

```{bash}
#| eval: false
ls -l ~/mimic/
```

Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises.

Use Bash commands to answer following questions.

2.  Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Answer：**

```{bash}
ls -l ~/desktop/mimic/hosp
ls -l ~/desktop/mimic/icu
```

**Why .csv.gz Instead of .csv?**\
The MIMIC data files are distributed as .csv.gz (compressed CSV) files rather than plain .csv files to reduce their size, making downloading and storing more efficient. Compressed files use less disk space and bandwidth.

3.  Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Answer：**\
`zcat` is used to display the content of compressed files to the standard output. Instead of uncompressing the file to disk, it decompresses the file stream and displays it directly in the terminal.\
`zless`is a utility that allows you to view compressed text files page by page in an interactive way. It automatically decompresses the file for viewing but doesn't create an uncompressed file on disk.\
`zmore` lets you view compressed files page by page but in a non-interactive way compared to zless. Once you move past a page, you cannot navigate back.\
`zgrep`is used for searching text patterns within compressed files using regular expressions.\

4.  (Looping in Bash) What's the output of the following bash script?

```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```

Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)\
**Answer:**

```{bash}
for datafile in ~/desktop/mimic/hosp/{a,l,pa}*.gz
do
  echo $datafile
  zcat < $datafile | wc -l
done
```
the output is the number of lines in each data file. 'admissions.csv.gz' has 431232 line. 'patients.csv.gz' has 118171368 lines. 'patients.csv.gz' has 299713 lines\

5.  Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)\
    **Answer:**

```{bash}
zcat < ~/desktop/mimic/hosp/admissions.csv.gz | head
```

```{bash}
zcat < ~/desktop/mimic/hosp/admissions.csv.gz | wc -l

```
There are 431233 rows in this data file.\
```{bash}
```{bash}
zcat <~/desktop/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F',' '{print $1}' | sort | uniq | wc -l
```
There are 180733 unique patients in this data file.\

```{bash}
zcat <~/desktop/mimic/hosp/patients.csv.gz | tail -n +2 | awk -F',' '{print $1}' | sort | uniq | wc -l
 
```
There are 299712 unique patients in this data file.\

6.  What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)\
    **Answer:**\
    `admission_type`\

```{bash}
zcat < ~/desktop/mimic/hosp/admissions.csv.gz | tail -n +2 | cut -d',' -f6 | sort | uniq -c
 
```

`admission_location`

```{bash}
zcat < ~/desktop/mimic/hosp/admissions.csv.gz | tail -n +2 | cut -d',' -f8 | sort | uniq -c
 
```

`insurance`

```{bash}
zcat < ~/desktop/mimic/hosp/admissions.csv.gz | tail -n +2 | cut -d',' -f10 | sort | uniq -c
 
```

`ethnicity`

```{bash}
zcat < ~/desktop/mimic/hosp/admissions.csv.gz | tail -n +2 | cut -d',' -f13 | sort | uniq -c
 
```

7.  *To compress, or not to compress. That's the question.* Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)\
    **Answer:**\
    storage

```{bash}
ls -lh ~/desktop/mimic/hosp/labevents.csv.gz 
gzip -dk < ~/desktop/mimic/hosp/labevents.csv.gz > ~/desktop/mimic/hosp/labevents.csv
ls -lh ~/desktop/mimic/hosp/labevents.csv
 
```

Storage: Compressed files (\*.gz) take up significantly less disk space, which is crucial for big data files. This means lower storage costs and faster data transfers

speed

```{bash}
time zcat < ~/desktop/mimic/hosp/labevents.csv.gz | wc -l
time wc -l ~/desktop/mimic/hosp/labevents.csv
 
```

Speed: When accessing the data, compressed files require an additional step of decompression, which can take time. The impact on speed depends on the computational resources available and the efficiency of the compression algorithm. In many cases, reading directly from a compressed file (zcat) can be slower than reading from an uncompressed file due to the extra processing required for decompression.

## Q4. Who's popular in Price and Prejudice

1.  You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder.

```{bash eval =TRUE}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```

Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

```{bash, eval =TRUE}
#| eval: true
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o $char pg42671.txt | wc -l
done
```
**Answer:**  
`wget -nc` downloads the file from the URL if it doesn't already exist in the current directory. \ 
2.  What's the difference between the following two commands?

```{bash, eval =TRUE}
#| eval: true
echo 'hello, world' > test1.txt
```

and

```{bash}
#| eval: true
echo 'hello, world' >> test2.txt
```

**Answer:**  
echo 'hello, world' \> test1.txt This command uses '> 'for redirection, which means that the output of the echo command (hello, world) will be written to test1.txt.\
If test1.txt already exists, it will be overwritten without any warning.\
If test1.txt does not exist, it will be created.\

echo 'hello, world' \>\> test2.txt This command uses >> for redirection, which means that the output of the echo command will be appended to the end of test2.txt.\
If test2.txt already exists, the new content (hello, world) will be added to the end of the existing content in the file.\
If test2.txt does not exist, it will be created, and then the content will be written to it.\

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:

```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```

Using `chmod` to make the file executable by the owner, and run

```{bash}
#| eval: true
./middle.sh pg42671.txt 20 5
```

Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?  
**Answer:**  
1.The output is the 5 lines from line 16 to line 20 of pg42671.txt.

2.The script uses head and tail to extract a specified range of lines from a file.
`$1` is the first argument passed to the script, which is the filename. `$2` is the second argument passed to the script, which is the end line. `$3` is the third argument passed to the script, which is the number of lines to extract. 

3.The first line of the shell script is needed to tell the system that the script should be run using the Bourne shell.

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**Answer:**\
```{bash}
#| eval: false
cal
```

```{bash}
#| eval: false
cal 2024
```

```{bash}
cal 9 1752
```

```{bash}
date
```

```{bash}
hostname
```

```{bash}
arch
```

```{bash}
uname -a
```

```{bash}
uptime
```

```{bash}
who am i
```

```{bash}
who
```

```{bash}
w
```

```{bash}
id
```

```{bash}
last | head
```

```{bash}
echo {con,pre}{sent,fer}{s,ed}
```

```{bash}
time sleep 5
```

```{bash}
history | tail
```


**Interpretation:**\

`cal`: Displays a calendar of the current month.\
`cal 2024`: Shows the calendar for the entire year 2024.\
`cal 9 1752`: Displays the calendar for September 1752. This is unusual because you'll notice that several days (3rd to 13th) are missing. This is due to the adoption of the Gregorian calendar which replaced the Julian calendar and required a realignment of dates.\
`date`: Shows the current date and time.\
`hostname`: Displays the name of the computer you are using.\
`arch`: Shows the architecture of the processor in your computer.\
`uname -a`: Displays detailed system information (kernel name, hostname, kernel release, kernel version, machine hardware name, processor type, hardware platform, and operating system).\
`uptime`: Shows how long the system has been running since the last boot, including the current time, how many users are logged in, and system load averages for the past 1, 5, and 15 minutes.\
`who am i`: Displays information about your current terminal session (username, terminal name, date and time of login).\
`who`: Shows who is logged on the system.\
`w`: Similar to who, but also shows what each user is doing, and system load averages.\
`id`: Displays user identity information, including user ID, group ID, and groups the user belongs to.\
`last | head`: Shows the last few logins in the system (the head command limits the output to just the first few lines).\
`echo {con,pre}{sent,fer}{s,ed}`: This is an example of brace expansion in Bash. It will generate and display all possible combinations of the strings: "consents", "consented", "presents", "presented", "confers", "confered", "prefers", "prefered".\
`time sleep 5`: This command will pause for 5 seconds (due to sleep 5) and then time will display how long the command took to execute (real, user, and system time).\
`history | tail`: Displays the last few commands you have entered in your current terminal session.

## Q6. Book

1.  Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book *Reproducible Research with R and RStudio* to your local machine. (Hint: use `git clone` command.)\
    **Answer:**
    ```{bash}
#| eval: false
git clone https://github.com/christophergandrud/Rep-Res-Book
```

2.  Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.  
**Answer:**
  ![image](/Users/luxier/Desktop/203b-hw/截屏2024-01-24 下午3.07.33.png)
